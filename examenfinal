{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------\n",
      "-----MENU PRINCIPAL Pybooks-----\n",
      "1.-Stock marca.\n",
      "2.-Busqueda por precio.\n",
      "3.-Actualizar precio.\n",
      "4.-Salir. \n",
      "----------------------------------------\n",
      "Stock total de la marca lenovo : 2175HD\n",
      "Stock total de la marca lenovo : 123FHD\n",
      "Stock total de la marca lenovo : 342FHD\n",
      "----------------------------------------\n",
      "-----MENU PRINCIPAL Pybooks-----\n",
      "1.-Stock marca.\n",
      "2.-Busqueda por precio.\n",
      "3.-Actualizar precio.\n",
      "4.-Salir. \n",
      "----------------------------------------\n",
      "¡¡El modelo no existe!!\n",
      "¡¡El modelo no existe!!\n",
      "¡Precio actualizado correctamente!\n",
      "----------------------------------------\n",
      "-----MENU PRINCIPAL Pybooks-----\n",
      "1.-Stock marca.\n",
      "2.-Busqueda por precio.\n",
      "3.-Actualizar precio.\n",
      "4.-Salir. \n",
      "----------------------------------------\n",
      "Programa finalizado....\n"
     ]
    }
   ],
   "source": [
    "productos = {'8475HD': ['HP', 15.6, '8GB', 'DD', '1T', 'Intel Core i5', 'Nvidia GTX1050'],\n",
    "'2175HD': ['lenovo', 14, '4GB', 'SSD', '512GB', 'Intel Core i5', 'Nvidia GTX1050'],\n",
    "'JjfFHD': ['Asus', 14, '16GB', 'SSD', '256GB', 'Intel Core i7', 'Nvidia RTX2080Ti'],\n",
    "'fgdxFHD': ['HP', 15.6, '8GB', 'DD', '1T', 'Intel Core i3', 'integrada'],\n",
    "'GF75HD': ['Asus', 15.6, '8GB', 'DD', '1T', 'Intel Core i7', 'Nvidia GTX1050'],\n",
    "'123FHD': ['lenovo', 14, '6GB', 'DD', '1T', 'AMD Ryzen 5', 'integrada'],\n",
    "'342FHD': ['lenovo', 15.6, '8GB', 'DD', '1T', 'AMD Ryzen 7', 'Nvidia GTX1050'],\n",
    "'UWU131HD': ['Dell', 15.6, '8GB', 'DD', '1T', 'AMD Ryzen 3', 'Nvidia GTX1050'], \n",
    "}\n",
    "\n",
    "stock = {'8475HD': [387990,10], '2175HD': [327990,4], 'JjfFHD': [424990,1],\n",
    "'fgdxFHD': [664990,21], '123FHD': [290890,32], '342FHD': [444990,7],\n",
    "'GF75HD': [749990,2], 'UWU131HD': [349990,1], 'FS1230HD': [249990,0],\n",
    "}\n",
    "\n",
    "\n",
    "def stock_de_marca():\n",
    "    marca = input('Ingrese la marca que desea saber el stock: ')\n",
    "    total = 0\n",
    "    for modelos in productos:\n",
    "        if productos[modelos][0].lower() == marca.lower():\n",
    "            if modelos in stock:\n",
    "                total += stock[modelos][1]\n",
    "                print(f'Stock total de la marca {marca} : {modelos}')\n",
    "                \n",
    "                \n",
    "def buscar_por_precio():\n",
    "    try:\n",
    "        precio_min = int(input('Ingrese precio minimo  a buscar: '))\n",
    "        precio_max = int(input('Ingrese precio maximo a buscar: '))\n",
    "        resultado = []\n",
    "        for modelos in stock:\n",
    "            precio = stock[modelos][0]\n",
    "            cant = stock[modelos][1]\n",
    "            if precio_min <= precio <= precio_max and cant > 0:\n",
    "                marca = productos[modelos][0]\n",
    "                resultado.append(f'{marca}--{modelos}')\n",
    "                if resultado:\n",
    "                    for item in stock(resultado):\n",
    "                        print(item)\n",
    "                else:\n",
    "                    print('No hay notebooks en ese rango de precio')\n",
    "    except ValueError:\n",
    "        print('¡Debe ingresar valores enteros!')            \n",
    "            \n",
    "        \n",
    "def actualizar_precio():\n",
    "    while True:\n",
    "        modelos = input('Ingrese el modelo a actualizar: ').upper()\n",
    "        if modelos not in stock:\n",
    "            print('¡¡El modelo no existe!!')\n",
    "        else:\n",
    "            try:\n",
    "                nuevo_precio = int(input('Ingrese el nuevo precio que desea actualizar: '))\n",
    "                stock[modelos][0] = nuevo_precio\n",
    "                print('¡Precio actualizado correctamente!')\n",
    "                opcion = input('Desea actualizar otro precio (s/n): ')\n",
    "                if opcion.lower() != 's':\n",
    "                    break\n",
    "            except ValueError:\n",
    "                print('¡Debe ingresar un valor numerico!.')\n",
    "\n",
    "def mostrar_menu():\n",
    "    print('-'*40)\n",
    "    print('-----MENU PRINCIPAL Pybooks-----')\n",
    "    print('1.-Stock marca.')\n",
    "    print('2.-Busqueda por precio.')\n",
    "    print('3.-Actualizar precio.--')\n",
    "    print('4.-Salir. ')\n",
    "    print('-'*40)\n",
    "    \n",
    "    \n",
    "def menu():\n",
    "    while True:\n",
    "        mostrar_menu()\n",
    "        opcion = input('Seleccione una opcion: ')\n",
    "        if opcion == '1':\n",
    "            stock_de_marca()\n",
    "        elif opcion == '2':\n",
    "            buscar_por_precio()\n",
    "        elif opcion == '3':\n",
    "            actualizar_precio()\n",
    "        elif opcion == '4':\n",
    "            print('Programa finalizado....')\n",
    "            break\n",
    "        else:\n",
    "            print('Debe seleccionar una opcion valida.')      \n",
    "                \n",
    "menu()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
